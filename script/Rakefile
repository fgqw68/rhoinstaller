# rake script

require 'date'
require 'fileutils'
load 'jake.rb'

$majorVer = "2"
$minorVer = "0"
$miniVer  = "0"
$betaVer  = "5"

$isConnBeta     = true
$isAdapterBeta  = false
$isElementsBeta = true

$isMotorolaBeta = true

$rhodesgem         = "C:/Android/installer/package/rhoelements gems/Beta5/rhodes-3.3.3.beta.5.17.gem"
$rhoelemetsgem     = "C:/Android/installer/package/rhoelements gems/Beta5/rhoelements-2.0.0.beta.5.17.gem"
$nsisPath          = "C:/Program Files (x86)/NSIS/makensis.exe"
$rubyPath          = "C:/Android/rhosync/ruby"
$rubyInstallPath   = "C:/Android/Installer/package/ruby"
$installScript     = "rhostudio.nsi"
$installMotoScript = "rhostudio-moto.nsi"
$commonName        = "RhoStudioInstaller"
$extWinExe         = '.exe'
$extOsxExe         = '.dmg'
$config            = Jake.config(File.open("installer.yml"))
$installer_dir     = File.expand_path File.join(File.dirname(__FILE__), '..')     
$package_dir       = File.join($installer_dir, 'package')
$feature_dir       = File.join($installer_dir, 'feature')
$workspace_dir     = 'C:\Android\rhodes-plugins-ws'
# $workspace_dir     = '/Users/sv/rhomobile/workspace'
$studio_dir        = 'C:\Android\rhodes-plugins'
# $studio_dir        = '/Users/sv/rhomobile/rhostudio'
$eclipseLauncherJar = File.join($package_dir, "eclipse", "plugins", "org.eclipse.equinox.launcher_1.1.1.R36x_v20101122_1400.jar")


namespace "installer" do

    def exportPlugin
        destination = File.expand_path File.join($package_dir, 'eclipse')
        destinationJarGlob = File.join(destination, 'plugins', 'com.rhomobile.rhostudio_*.jar')
        pluginExport = File.join($studio_dir, 'rhogen-wizard', 'plugin_export.xml')
        rhoStudioExe = File.join(destination, "RhoStudio.exe")

        rm Dir.glob(destinationJarGlob)
        `java -jar #{$eclipseLauncherJar} -application org.eclipse.ant.core.antRunner -data #{$workspace_dir} -buildfile #{pluginExport} -Ddestination=#{destination}`

        `#{rhoStudioExe}`
    end

    def exportFeature
        destination = File.expand_path File.join($installer_dir, 'feature')
        featureExport = File.join($studio_dir, 'rhostudio-feature', 'feature_export.xml')

        rm_rf destination
        `java -jar #{$eclipseLauncherJar} -application org.eclipse.ant.core.antRunner -data #{$workspace_dir} -buildfile #{featureExport} -Ddestination=#{destination}`
        `java -jar #{$eclipseLauncherJar} -application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher -metadataRepository file:/#{destination} -artifactRepository file:/#{destination} -sources #{destination} -compress -append -publishArtifacts`
    end

    def updateSas 
      chdir File.join($package_dir, "samples", "rhodes-system-api-samples")
      `git pull`
    end

    def buildRhoElementsWmCfg(cfg_name, bin_dir_name, out_dir_name)
      puts 'start build RhoElements for ' + cfg_name.to_s + " WM configuration"
      chdir File.join($package_dir, "RhoElements2")

      $re_config = Jake.config(File.open("build.yml"))
      $re_config["sdk"] = nil
      $re_config["wm"] = {:sdk => cfg_name}

      output = File.new('build.yml', 'w+')
      output.puts YAML.dump($re_config)
      output.close
      
      `rake clean:wm`
      `rake device:wm:production`
      
      chdir File.join($package_dir, "RhoElements2 Shared Runtime")
      rm_rf out_dir_name
      mkdir out_dir_name
 
      chdir File.dirname(__FILE__)
      cp_r File.join($package_dir, "RhoElements2", "bin", "target", bin_dir_name, "RhoElements.cab"), File.join($package_dir, "RhoElements2 Shared Runtime", out_dir_name, "RhoElements.cab")
            
    end

    def buildRhoElementsAndroidCfg()
      puts 'start build RhoElements for Android configuration'        
      chdir File.join($package_dir, "RhoElements2")

      $re_config = Jake.config(File.open("build.yml"))
      $re_config["sdk"] = nil

      output = File.new('build.yml', 'w+')
      output.puts YAML.dump($re_config)
      output.close
    
      #`rake clean:android`
      `rake device:android:production`

      chdir File.join($package_dir, "RhoElements2 Shared Runtime")
      rm_rf "Android"
      mkdir "Android"

      cp_r File.join($package_dir, "RhoElements2", "bin", "target", "RhoElements_signed.apk"), File.join($package_dir, "RhoElements2 Shared Runtime", "android", "RhoElements_signed.apk")
    end
        
    def deployRhoElementsBinaries
      $app_config = Hash.new
      $app_config["extpaths"] = Array.new

      rho_elements_dst_dir = File.join($package_dir, "RhoElements2 Shared Runtime")
      rm_rf rho_elements_dst_dir
      require "rhoelements"
      rho_elements_src_dir = File.expand_path(File.join($rhodes_extensions[0], "..", "..", "RhoElements2", "Runtime"))
      puts "source Rhoelements2 directory: " + rho_elements_src_dir

      if File.exists? File.join(rho_elements_src_dir)
        cp_r rho_elements_src_dir, rho_elements_dst_dir
        rm_rf rho_elements_src_dir
      end
    end

    def deployRhoElements2App
      chdir $package_dir

      $app_config = Hash.new
      $app_config["extpaths"] = Array.new

      chdir $package_dir
      rm_rf "RhoElements2"
      rho_elements_dst_dir = "RhoElements2"
      rm_rf rho_elements_dst_dir
      require "rhoelements"
      rho_elements_src_dir = File.expand_path(File.join($rhodes_extensions[0], "..", "..", "RhoElements2"))
      puts "source Rhoelements2 directory: " + rho_elements_src_dir
      cp_r rho_elements_src_dir, rho_elements_dst_dir
      chdir File.dirname(__FILE__)
    end

    def prepareNsisScript(installDir)
       chdir File.dirname(__FILE__)

       FileUtils.cp_r $installScript, installDir
       script_name = File.join(installDir, $installScript)
       install_script = File.read(script_name)
       install_script = install_script.gsub(/%NSIS_SCRIPT_PATH%/, File.expand_path("./").gsub("\/","\\"))
       File.open(script_name, "w") { |file| file.puts install_script }

       # script for motorola
       FileUtils.cp_r $installMotoScript, installDir
       script_name = File.join(installDir, $installMotoScript)
       install_script = File.read(script_name)
       install_script = install_script.gsub(/%NSIS_SCRIPT_PATH%/, File.expand_path("./").gsub("\/","\\"))
       File.open(script_name, "w") { |file| file.puts install_script }
    end

    def runNsisScript(installScript)
       chdir $package_dir

       prepareNsisScript($package_dir)
       chdir $package_dir
       Jake.run2 $nsisPath, [installScript], {:nowait => false}
       chdir File.dirname(__FILE__)
    end

    def renameInstaller(installerPrefix)
       chdir $package_dir

       puts 'add version to build file'
       installerName = ""
       currTime = Time.now
       currDate = currTime.strftime("%d%m%Y%H%M")

       installerName = $commonName + $majorVer.to_s + "." + $minorVer.to_s + "." + $miniVer +  installerPrefix + $extWinExe

       puts 'new installer file name: ' + installerName
       File.rename($commonName + $extWinExe, installerName) 
    end

    def changeRubyFolder()
        chdir $package_dir
        #copy ruby folder
        puts 'start change ruby folder'
        FileUtils.rm_rf "./eclipse/configuration/.setting"
        #FileUtils.rm_rf $rubyInstallPath      
        #FileUtils.cp_r $rubyPath, $rubyInstallPath
        chdir File.dirname(__FILE__)
    end

    def installMotoGems(isElementsBeta)
        if File.exist? $rhoelemetsgem
          Jake.run2 "gem", ["uninstall", "rhoelements", "-a"], {:nowait => false} 
          Jake.run2 "gem", ["install", $rhoelemetsgem], {:nowait => false} 
       else
          puts 'Rhoelements gem not found [' + $rhoelemetsgem + ']'
          exit
       end
    end

    def installGems(isConnBeta, isAdapterBeta)        
        Jake.run2 "gem", ["uninstall", "rhomobile-debug", "-a"], {:nowait => false} 
        Jake.run2 "gem", ["uninstall", "rhodes", "-a"], {:nowait => false} 
        Jake.run2 "gem", ["uninstall", "rhoconnect", "-a"], {:nowait => false}       
        Jake.run2 "gem", ["uninstall", "rhoconnect-adapters", "-a"], {:nowait => false} 
        Jake.run2 "gem", ["uninstall", "rhodes-translator", "-a"], {:nowait => false} 
        Jake.run2 "gem", ["uninstall", "rhoelements", "-a"], {:nowait => false} 
        Jake.run2 "gem", ["uninstall", "mspec", "-a"], {:nowait => false} 

        Jake.run2 "gem", ["install", "rhomobile-debug"], {:nowait => false} 
        Jake.run2 "gem", ["install", "rhodes-translator"], {:nowait => false} 
        Jake.run2 "gem", ["install", "mspec"], {:nowait => false} 

        Jake.run2 "gem", ["install", $rhodesgem], {:nowait => false} 

        if isConnBeta == false
          Jake.run2 "gem", ["install", "rhoconnect"], {:nowait => false}       
        else
          Jake.run2 "gem", ["install", "rhoconnect", "--pre"], {:nowait => false}       
        end

        if isAdapterBeta == false
          Jake.run2 "gem", ["install", "rhoconnect-adapters"], {:nowait => false} 
        else
          Jake.run2 "gem", ["install", "rhoconnect-adapters", "--pre"], {:nowait => false} 
        end
    end  

    namespace "user" do
      task :gems do
        installGems($isConnBeta, $isAdapterBeta)
        updateSas()
        changeRubyFolder()
      end

      task :nsis => "gems" do 
        puts 'start build nsis script: ' +  $installScript
        runNsisScript($installScript)
      end

      task :rename => "nsis" do
        renameInstaller(".beta" + $betaVer)
      end

    end

    namespace "motorola" do
      task :gems do #=> "installer:rhostudio:plugin" do
        puts 'release - reinstall gems task'        
        $commonName = "MotorolaRhoMobileSuite"

        installGems($isConnBeta, $isAdapterBeta)
        installMotoGems($isElementsBeta)

        updateSas()
        changeRubyFolder()
        deployRhoElementsBinaries
        deployRhoElements2App()
      end

      task :nsis => "gems" do 
        puts 'release - start build nsis script: ' +  $installMotoScript
        runNsisScript($installMotoScript)
      end

      task :rename => "nsis" do
        puts 'release - start rename task'

        if $isMotorolaBeta == true
           renameInstaller(".beta" + $betaVer)
        else
           renameInstaller("")
        end
      end
    end

    namespace "rhostudio" do
      task :plugin do
        exportPlugin
      end

      task :feature do
        exportFeature
      end
    end

    ########################################################

    task :gems do
      installGems($isConnBeta, $isAdapterBeta)
      installMotoGems($isElementsBeta)
    end

    task :motorola => "motorola:rename" do
    end

    task :test do

    end

end
