# rake script

require 'date'
require 'fileutils'
load 'jake.rb'

$majorVer = "2"
$minorVer = "0"
$miniVer  = "0"
$betaVer  = "5.23"

$isConnBeta     = true
$isAdapterBeta  = false

$isMotorolaBeta = true

$installer_dir     = File.expand_path File.join(File.dirname(__FILE__), '..')
$script_dir        = File.join($installer_dir, 'script')
$package_dir       = File.join($installer_dir, 'package')
$gems_dir          = File.join($package_dir, 'rhoelements gems')
$nsisPath          = "C:/Program Files (x86)/NSIS/makensis.exe"
$installScript     = "rhostudio.nsi"
$installMotoScript = "rhostudio-moto.nsi"
$commonName        = "RhoStudioInstaller"
$extWinExe         = '.exe'
$extOsxExe         = '.dmg'
$config            = Jake.config(File.open("installer.yml"))
$workspace_dir     = 'C:\Users\sv\rhomobile\.inst\workspace'
# $workspace_dir     = '/Users/sv/rhomobile/workspace'
$studio_dir        = 'C:\Users\sv\rhomobile\.inst\rhostudio'
# $studio_dir        = '/Users/sv/rhomobile/rhostudio'
$eclipseLauncherJar = File.join($package_dir, "eclipse", "plugins", "org.eclipse.equinox.launcher_1.1.1.R36x_v20101122_1400.jar")

$ruby_env = {:Path => [
    File.join($package_dir, 'redis-2.4.0'),
    File.join($package_dir, 'ruby', 'bin'),
    File.join($package_dir, 'devkit', 'bin'),
    File.join($package_dir, 'devkit', 'mingw', 'bin'),
    File.join($package_dir, 'make-3.81', 'bin')
].join(File::PATH_SEPARATOR)}

namespace "installer" do

    def run(command, cd = nil, env = {})
        set_list = []
        env.each_pair do |k, v|
            set_list << "set \"#{k}=#{v}\"&&"
        end

        toPrint = command
        toRun = set_list.join('') + command
        if !cd.nil?
            toPrint = "#{cd}>#{toPrint}"
            toRun = "cd /d \"#{cd}\"&&#{toRun}"
        end

        puts
        puts toPrint
        exit 1 if !system(toRun)
    end

    def findGem(prefix)
        glob = File.join($gems_dir, '**', prefix + '-*.gem')
        gems = Dir.glob glob
        if gems.length == 0
            puts "Error: Gem '#{glob}' is not found."
            exit 1
        end
        if gems.length > 1
            puts "Error: Several gems '#{glob}' are found:"
            gems.each { |gem| puts "    '#{gem}'" }
            exit 1
        end
        return gems[0]
    end

    def findRhoElements2
        glob = File.join($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'gems', 'rhoelements-*', 'RhoElements2')
        directories = Dir.glob glob
        if directories.length == 0
            puts "Error: directory '#{glob}' is not found."
            exit 1
        end
        if directories.length > 1
            puts "Error: Several directories '#{glob}' are found:"
            directories.each { |directory| puts "    '#{directory}'" }
            exit 1
        end
        return directories[0]
    end

    def exportPlugin
        destination = File.expand_path File.join($package_dir, 'eclipse')
        destinationJarGlob = File.join(destination, 'plugins', 'com.rhomobile.rhostudio_*.jar')
        pluginExport = File.join($studio_dir, 'rhogen-wizard', 'plugin_export.xml')
        rhoStudioExe = File.join(destination, "RhoStudio.exe")

        rm Dir.glob(destinationJarGlob)
        `java -jar #{$eclipseLauncherJar} -application org.eclipse.ant.core.antRunner -data #{$workspace_dir} -buildfile #{pluginExport} -Ddestination=#{destination}`

        `#{rhoStudioExe}`
    end

    def exportFeature
        destination = File.expand_path File.join($installer_dir, 'feature')
        featureExport = File.join($studio_dir, 'rhostudio-feature', 'feature_export.xml')

        rm_rf destination
        `java -jar #{$eclipseLauncherJar} -application org.eclipse.ant.core.antRunner -data #{$workspace_dir} -buildfile #{featureExport} -Ddestination=#{destination}`
        `java -jar #{$eclipseLauncherJar} -application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher -metadataRepository file:/#{destination} -artifactRepository file:/#{destination} -source #{destination} -compress -append -publishArtifacts`
    end

    def updateSas 
      samples_dir = File.join($package_dir, 'samples')
      repo_sas = File.join(samples_dir, 'rhodes-system-api-samples')
      rm_rf repo_sas
      run('git clone https://github.com/rhomobile/rhodes-system-api-samples.git', samples_dir)
      rm_rf File.join(repo_sas, ".git")
    end

    def buildRhoElementsWmCfg(cfg_name, bin_dir_name, out_dir_name)
      puts 'start build RhoElements for ' + cfg_name.to_s + " WM configuration"
      chdir File.join($package_dir, "RhoElements2")

      $re_config = Jake.config(File.open("build.yml"))
      $re_config["sdk"] = nil
      $re_config["wm"] = {:sdk => cfg_name}

      output = File.new('build.yml', 'w+')
      output.puts YAML.dump($re_config)
      output.close
      
      `rake clean:wm`
      `rake device:wm:production`
      
      chdir File.join($package_dir, "RhoElements2 Shared Runtime")
      rm_rf out_dir_name
      mkdir out_dir_name
 
      chdir File.dirname(__FILE__)
      cp_r File.join($package_dir, "RhoElements2", "bin", "target", bin_dir_name, "RhoElements.cab"), File.join($package_dir, "RhoElements2 Shared Runtime", out_dir_name, "RhoElements.cab")
            
    end

    def buildRhoElementsAndroidCfg()
      puts 'start build RhoElements for Android configuration'        
      chdir File.join($package_dir, "RhoElements2")

      $re_config = Jake.config(File.open("build.yml"))
      $re_config["sdk"] = nil

      output = File.new('build.yml', 'w+')
      output.puts YAML.dump($re_config)
      output.close
    
      #`rake clean:android`
      `rake device:android:production`

      chdir File.join($package_dir, "RhoElements2 Shared Runtime")
      rm_rf "Android"
      mkdir "Android"

      cp_r File.join($package_dir, "RhoElements2", "bin", "target", "RhoElements_signed.apk"), File.join($package_dir, "RhoElements2 Shared Runtime", "android", "RhoElements_signed.apk")
    end
        
    def deployRhoElements2
      def moveDir(source, targetName)
        target = File.join($package_dir, targetName)
        puts "move '#{source}' to '#{target}'"
        rm_rf target
        mv(source, target)
      end

      source = findRhoElements2

      moveDir(File.join(source, 'Runtime'), 'RhoElements2 Shared Runtime')
      moveDir(          source            , 'RhoElements2'               )
    end

    def prepareNsisScript(installScript)
       replacement = $script_dir.gsub('/',"\\")

       install_script = File.read(File.join($script_dir, installScript))
       install_script.gsub!(/%NSIS_SCRIPT_PATH%/) {replacement}
       script_name = File.join($package_dir, installScript)
       File.open(script_name, "w") { |file| file.puts install_script }
    end

    def runNsisScript(installScript)
       prepareNsisScript(installScript)
       run("\"#{$nsisPath}\" \"#{installScript}\"", $package_dir)
    end

    def renameInstaller(installerPrefix)
       oldName = $commonName + $extWinExe
       newName = $commonName + $majorVer.to_s + "." + $minorVer.to_s + "." + $miniVer +  installerPrefix + $extWinExe

       mv(File.join($package_dir, oldName), File.join($package_dir, newName)) 
    end

    def removeEclipseSettings
        rm_rf File.join($package_dir, 'eclipse', 'configuration', '.settings')
    end

    def removeRubyCache
        rm_rf Dir.glob File.join($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'cache')
    end

    def copyRuby
        target = File.join($package_dir, 'ruby')
        rm_rf target
        cp_r(File.join($installer_dir, 'ruby'), target)
    end

    def installGems(isConnBeta, isAdapterBeta)
        def installGem(gem, pre = false)
            run("gem install #{gem}#{pre ? ' --pre' : ''}", nil, $ruby_env)
        end

        rhodesgem = findGem('rhodes')
        puts "Found rhodes gem '#{rhodesgem}'"
        rhoelementsgem = findGem('rhoelements')
        puts "Found rhoelements gem '#{rhoelementsgem}'"

        # 'gem update --system' command have to be invoked. But it is batch that changes itself
        # leading to harmless error.
        # There is same action as 'gem update --system':
        gem = File.join($package_dir, 'ruby', 'bin', 'gem')
        run("ruby \"#{gem}\" update --system", nil, $ruby_env)

        installGem 'rhomobile-debug'
        installGem 'rhodes-translator'
        installGem 'mspec'
        installGem "\"#{rhodesgem}\""
        installGem 'eventmachine', isConnBeta
        installGem 'rhoconnect', isConnBeta
        installGem 'rhoconnect-adapters', isAdapterBeta
        installGem "\"#{rhoelementsgem}\""
    end

    namespace "user" do
      task :gems do
        installGems($isConnBeta, $isAdapterBeta)
        updateSas()
        removeEclipseSettings()
      end

      task :nsis => "gems" do 
        puts 'start build nsis script: ' +  $installScript
        runNsisScript($installScript)
      end

      task :rename => "nsis" do
        renameInstaller(".beta" + $betaVer)
      end

    end

    namespace "motorola" do
      task :gems do #=> "installer:rhostudio:plugin" do
        puts 'release - reinstall gems task'        
        $commonName = "MotorolaRhoMobileSuite"

        copyRuby
        installGems($isConnBeta, $isAdapterBeta)

        updateSas()
        removeEclipseSettings()
        removeRubyCache()
        deployRhoElements2
      end

      task :nsis => "gems" do 
        puts 'release - start build nsis script: ' +  $installMotoScript
        runNsisScript($installMotoScript)
      end

      task :rename => "nsis" do
        puts 'release - start rename task'

        if $isMotorolaBeta == true
           renameInstaller(".beta" + $betaVer)
        else
           renameInstaller("")
        end
      end
    end

    namespace "rhostudio" do
      task :plugin do
        exportPlugin
      end

      task :feature do
        exportFeature
      end
    end

    ########################################################

    task :gems do
      installGems($isConnBeta, $isAdapterBeta)
    end

    task :motorola => "motorola:rename" do
    end

    task :test do
    end

end
