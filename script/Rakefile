# rake script

require 'date'
require 'fileutils'
load 'jake.rb'


$version                  = '02010104'
$isMotorolaBeta           = false
$nsisPath                 = "C:/Program Files (x86)/NSIS/makensis.exe"

$base_dir          = File.expand_path File.join(File.dirname(__FILE__), '..', '..')
$installer_dir     = File.join($base_dir, 'rhoinstaller')
$studio_dir        = File.join($base_dir, 'rhostudio')
$workspace_dir     = File.join($base_dir, 'workspace')
$gems_dir          = File.join($base_dir, 'gems')
$script_dir        = File.join($installer_dir, 'script')
$package_dir       = File.join($installer_dir, 'package')
$installScript     = "rhostudio.nsi"
$installMotoScript = "rhostudio-moto.nsi"
$extWinExe         = '.exe'
$config            = Jake.config(File.open("installer.yml"))
$eclipse           = File.join($base_dir, 'eclipse', 'eclipse')
$eclipse           += 'c' if File.exists?($eclipse + 'c.exe')

$ruby_env = {:Path => [
    File.join($package_dir, 'redis-2.4.0'),
    File.join($package_dir, 'ruby', 'bin'),
    File.join($package_dir, 'devkit', 'bin'),
    File.join($package_dir, 'devkit', 'mingw', 'bin'),
    File.join($package_dir, 'make-3.81', 'bin')
].join(File::PATH_SEPARATOR)}

namespace "installer" do

    def chekout_git_repo(repo_path, label)
      cd repo_path
      run 'git config core.autocrlf false'
   	  Dir.glob('*'){ |f| rm_r( f, :verbose => false ) }
      run 'git reset --hard'
      run "git checkout #{label}"
    end

    def pull_git_repo(repo_path)
      cd repo_path
      run 'git config core.autocrlf false'
      run 'git pull'
    end

    def commit_version(new_version)
      run('git add version')
      run("git commit -m '#{new_version}'")
      run("git tag -a #{new_version} -m '#{new_version}'")
      run('git push')
      run('git push --tags')
    
      new_version    
    end

    def git_apply_label(new_version)
      run("git tag -a #{new_version} -m '#{new_version}'")
      run('git push --tags')    
      new_version    
    end

    def run(command, cd = nil, env = {})
        set_list = []
        env.each_pair do |k, v|
            set_list << "set \"#{k}=#{v}\"&&"
        end

        toPrint = command
        toRun = set_list.join('') + command
        if !cd.nil?
            toPrint = "#{cd}>#{toPrint}"
            toRun = "cd /d \"#{cd}\"&&#{toRun}"
        end

        puts
        puts toPrint
        exit 1 if !system(toRun)
    end

    def findOneItem(*globs)
        glob = File.join *globs
        items = Dir.glob glob
        if items.length == 0
            puts "Error: item '#{glob}' is not found."
            exit 1
        end
        if items.length > 1
            puts "Error: Several items '#{glob}' are found:"
            items.each do |item|
                puts "    '#{item}'"
            end
            exit 1
        end
        return items[0]
    end

    def findGem(prefix)
        return findOneItem($gems_dir, prefix + '-[0-9]*.gem')
    end

    def findGemAndReport(name)
        gem = findGem(name)
        puts "#{name} gem is found: '#{gem}'"
        return gem
    end

    def rmGlob(*globs)
        Dir.glob(File.join(*globs)) { |d| rm_r d }
    end

    def attachDmg(dmg)
        command = "hdiutil attach #{dmg}"
        puts
        puts command
        output = `#{command}`
        exit 1 if $? != 0
        disk = nil
        mount = nil
        output.lines do |line|
            match = line.match("^/dev/(\\w+)\\s*\tApple_partition_scheme\\s*\t$")
            if match
                disk = match[1]
            end
            match = line.match("^/dev/\\w+\\s*\tApple_HFS\\s*\t(/Volumes/.+)$")
            if match
                mount = match[1]
            end
        end
        if disk.nil? or mount.nil?
            STDERR.puts "Can not parse output of '#{command}' conmmand"
            exit 1
        end
        return disk, mount
    end

    def detachDmg(disk)
        run "hdiutil detach #{disk}"
    end

    def attachSuiteDmg
        attachDmg File.join($base_dir, 'RhoMobileSuiteInstaller.rw.dmg')
    end

    def removeRwDmg
        dmg = File.join($base_dir, 'RhoMobileSuiteInstaller.rw.dmg')
        if File.exists? dmg
            disk, mount = attachSuiteDmg
            detachDmg disk
            rmGlob dmg
        end
    end

    def makeRwDmg
        source = File.join($base_dir, 'RhoMobileSuiteInstaller.dmg')
        target = File.join($base_dir, 'RhoMobileSuiteInstaller.rw.dmg')
        run "hdiutil convert '#{source}' -format UDRW -o '#{target}'"
    end

    def removeRoDmg
        rmGlob($base_dir, 'RMS_*.dmg')
    end

    def makeRoDmg
        disk, mount = attachSuiteDmg
        detachDmg disk

        source = File.join($base_dir, 'RhoMobileSuiteInstaller.rw.dmg')
        target = File.join($base_dir, "RMS_#{$version}.dmg")
        run "hdiutil convert '#{source}' -format UDBZ -o '#{target}'"
    end

    def updateBundlesInfo
        destinationJarGlob = File.join($package_dir, 'eclipse', 'plugins', 'com.rhomobile.rhostudio_*.jar')

        ids = []
        Dir.glob(destinationJarGlob).each do |plugin|
            match = plugin.match(/com.rhomobile.rhostudio_(.+).jar$/)
            if match.nil?
                puts 'Impossible'
                exit 1
            end
            ids << match[1]
        end
        ids.sort!

        bundles = File.join($package_dir, 'eclipse', 'configuration', 'org.eclipse.equinox.simpleconfigurator', 'bundles.info')
        lines = []
        newLines = lambda {
            if not ids.nil?
                ids.each do |id|
                    lines << "com.rhomobile.rhostudio,#{id},plugins/com.rhomobile.rhostudio_#{id}.jar,4,false"
                end
                ids = nil
            end
        }
        File.open(bundles, 'r') do |f|
            while (line = f.gets)
                next if line.start_with?('com.rhomobile.rhostudio,')
                newLines.call if line > 'com.rhomobile.rhostudio,'
                lines << line
            end
            newLines.call
        end
        File.open(bundles, 'w') do |f|
            lines.each do |line|
                f.puts line
            end
        end
    end

    def removePlugin(destination)
        rmGlob(destination, 'plugins', 'com.rhomobile.rhostudio_*.jar')
    end

    def exportPlugin(destination)
        pluginExport = File.join($studio_dir, 'rhogen-wizard', 'plugin_export.xml')

        run "#{$eclipse} -nosplash -application org.eclipse.ant.core.antRunner -data #{$workspace_dir} -buildfile #{pluginExport} -Ddestination=\"#{destination}\""
    end

    def removePluginWin
        removePlugin File.join($package_dir, 'eclipse')
        updateBundlesInfo
    end

    def exportPluginWin
        exportPlugin File.join($package_dir, 'eclipse')
        updateBundlesInfo
    end

    def removePluginMac(mount)
        removePlugin File.join(mount, 'Motorola RhoStudio')
    end

    def exportPluginMac(mount)
        exportPlugin File.join(mount, 'Motorola RhoStudio')
    end

    def exportFeature
        destination = File.expand_path File.join($installer_dir, 'feature')
        featureExport = File.join($studio_dir, 'rhostudio-feature', 'feature_export.xml')

        rmGlob destination
        run "#{$eclipse} -nosplash -application org.eclipse.ant.core.antRunner -data #{$workspace_dir} -buildfile #{featureExport} -Ddestination=#{destination}"
        run "#{$eclipse} -nosplash -application org.eclipse.equinox.p2.publisher.FeaturesAndBundlesPublisher -metadataRepository file:/#{destination} -artifactRepository file:/#{destination} -source #{destination} -compress -append -publishArtifacts"
    end

    def buildRhoElementsWmCfg(cfg_name, bin_dir_name, out_dir_name)
      puts 'start build RhoElements for ' + cfg_name.to_s + " WM configuration"
      chdir File.join($package_dir, "RhoElements2")

      $re_config = Jake.config(File.open("build.yml"))
      $re_config["sdk"] = nil
      $re_config["wm"] = {:sdk => cfg_name}

      output = File.new('build.yml', 'w+')
      output.puts YAML.dump($re_config)
      output.close

      `rake clean:wm`
      `rake device:wm:production`

      chdir File.join($package_dir, "RhoElements2 Shared Runtime")
      rm_rf out_dir_name
      mkdir out_dir_name

      chdir File.dirname(__FILE__)
      cp_r File.join($package_dir, "RhoElements2", "bin", "target", bin_dir_name, "RhoElements.cab"), File.join($package_dir, "RhoElements2 Shared Runtime", out_dir_name, "RhoElements.cab")

    end

    def buildRhoElementsAndroidCfg()
      puts 'start build RhoElements for Android configuration'
      chdir File.join($package_dir, "RhoElements2")

      $re_config = Jake.config(File.open("build.yml"))
      $re_config["sdk"] = nil

      output = File.new('build.yml', 'w+')
      output.puts YAML.dump($re_config)
      output.close

      #`rake clean:android`
      `rake device:android:production`

      chdir File.join($package_dir, "RhoElements2 Shared Runtime")
      rm_rf "Android"
      mkdir "Android"

      cp_r File.join($package_dir, "RhoElements2", "bin", "target", "RhoElements_signed.apk"), File.join($package_dir, "RhoElements2 Shared Runtime", "android", "RhoElements_signed.apk")
    end

    def removeNsisScript
       rmGlob($package_dir, '*.nsi')
    end

    def makeNsisScript(installScript)
       replacement = $script_dir.gsub('/',"\\")

       install_script = File.read(File.join($script_dir, installScript))
       install_script.gsub!(/%NSIS_SCRIPT_PATH%/) {replacement}
       script_name = File.join($package_dir, installScript)
       File.open(script_name, "w") { |file| file.puts install_script }
    end

    def runNsisScript(installScript)
       makeNsisScript(installScript)
       run("\"#{$nsisPath}\" \"#{installScript}\"", $package_dir)
    end

    def renameInstaller(commonName, installerPrefix, installerSuffix)
       oldName = commonName + $extWinExe
       newName = installerPrefix + $version + installerSuffix + $extWinExe

       mv(File.join($package_dir, oldName), File.join($base_dir, newName))
    end

    def removeEclipseSettings
        rmGlob($package_dir, 'eclipse', 'configuration', '.settings')
    end

    def removeRubyCache
        rmGlob($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'cache')
    end

    def removeRuby
        rmGlob($package_dir, 'ruby')
    end

    def copyRuby
        cp_r(File.join($base_dir, 'ruby'), File.join($package_dir, 'ruby'))
    end

    def removeRhoElements2
        rmGlob($package_dir, 'RhoElements2 Shared Runtime')
        rmGlob($package_dir, 'RhoElements2'               )
    end

    def moveRhoElements2
      def moveDir(source, targetName)
        mv(source, File.join($package_dir, targetName))
      end

      source = findOneItem($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'gems', 'rhoelements-*', 'RhoElements2')

      moveDir(File.join(source, 'Runtime'), 'RhoElements2 Shared Runtime')
      moveDir(          source            , 'RhoElements2'               )
    end

    def removeReadme
      rmGlob($package_dir, 'README.html')
      rmGlob($package_dir, 'RhoStudio and Rho Software License Agreements.doc')
      rmGlob($package_dir, 'CREDITS')
    end

    def removeInstaller
      rmGlob($package_dir, 'MotorolaRhoMobileSuite' + $extWinExe)
      rmGlob($package_dir, 'RhoStudioInstaller' + $extWinExe)
    end

    def copyReadme
      readme = findOneItem($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'gems', 'rhoelements-*', 'ReadMe.html')
      cp(readme, File.join($package_dir, 'README.html'))
      eula = findOneItem($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'gems', 'rhoelements-*', 'RhoStudio and Rho Software License Agreements.doc')
      cp(eula, File.join($package_dir, 'RhoStudio and Rho Software License Agreements.doc'))
      credits = findOneItem($package_dir, 'ruby', 'lib', 'ruby', 'gems', '*', 'gems', 'rhodes-*', 'CREDITS')
      cp(credits, File.join($package_dir, 'CREDITS'))
    end

    def installGems
        def installGem(gem, pre = false)
            run("gem install #{gem}#{pre ? ' --pre' : ''}", nil, $ruby_env)
        end

        rhodesgem             = findGemAndReport('rhodes'             )
        rhoelementsgem        = findGemAndReport('rhoelements'        )
        rhoconnectgem         = findGemAndReport('rhoconnect'         )
        rhoconnectadaptersgem = findGemAndReport('rhoconnect-adapters')

        # 'gem update --system' command have to be invoked. But it is batch that changes itself
        # leading to harmless error.
        # There is same action as 'gem update --system':
        gem = File.join($package_dir, 'ruby', 'bin', 'gem')
        run("ruby \"#{gem}\" update --system", nil, $ruby_env)

        installGem 'rhomobile-debug'
        installGem 'rhodes-translator'
        installGem 'mspec'
        installGem "\"#{rhodesgem}\""
        installGem 'eventmachine', true
        installGem "\"#{rhoconnectgem}\""
        installGem "\"#{rhoconnectadaptersgem}\""
        installGem "\"#{rhoelementsgem}\""
    end

    def removeSamples(samplesDir)
      rmGlob samplesDir
    end

    def makeSamples(samplesDir)
      removeSamples(samplesDir)

      mkdir samplesDir

      repo_sas = File.join(samplesDir, 'rhodes-system-api-samples')
      cp_r(File.join($base_dir, 'rhodes-system-api-samples'), repo_sas)
      rmGlob(repo_sas, '.git')
      rmGlob(repo_sas, '.gitignore')
    end

    def removeSamplesWin
        removeSamples File.join($package_dir, 'samples')
    end

    def makeSamplesWin
        makeSamples File.join($package_dir, 'samples')
    end

    def removeSamplesMac(mount)
        removeSamples File.join(mount, 'samples')
    end

    def makeSamplesMac(mount)
        makeSamples File.join(mount, 'samples')
    end

    def cleanDir(dir)
        rmGlob(dir, '*')
        rmGlob(dir, '.DS_Store')
    end

    def removeMiscFilesMac(mount)
        cleanDir File.join(mount, 'RhoElements2 Shared Runtime')
        cleanDir File.join(mount, 'RhoElements2')
        rmGlob(mount, 'ReadMe.html')
        rmGlob(mount, 'RhoStudio and Rho Software License Agreements.doc')
        rmGlob(mount, 'CREDITS')
    end

    def makeMiscFilesMac(mount)
        def unpackGem(gemName, targetDir)
            gem = findGem(gemName)
            run "gem unpack '#{gem}' --target='#{targetDir}'"
            findOneItem(targetDir, "#{gemName}-[0-9]*")
        end

        def moveDirContent(source, target)
            Dir.glob(File.join(source, '*')) { |i| mv(i, target) }
            rm_r source
        end

        Dir.mktmpdir do |dir|
            # retrieve data from rhoelements gem
            rhoelementsDir = unpackGem('rhoelements', dir)

            moveDirContent(
                File.join(rhoelementsDir, 'RhoElements2', 'Runtime'),
                File.join(mount, 'RhoElements2 Shared Runtime')
            )

            moveDirContent(
                File.join(rhoelementsDir, 'RhoElements2'),
                File.join(mount, 'RhoElements2')
            )

            mv(File.join(rhoelementsDir, 'ReadMe.html'), mount)
            mv(File.join(rhoelementsDir, 'RhoStudio and Rho Software License Agreements.doc'), mount)

            # retrieve data from rhodes gem
            rhodesDir = unpackGem('rhodes', dir)

            mv(File.join(rhodesDir, 'CREDITS'), mount)
        end

        # copy scripts
        cp(File.join($installer_dir, 'dmg', 'Install gems'), mount)
        cp(File.join($installer_dir, 'dmg', 'Install gems on rvm'), mount)
        cp(File.join($installer_dir, 'dmg', 'RhoStudio under RVM'), File.join(mount, 'Motorola RhoStudio'))
        cp(File.join($installer_dir, 'dmg', 'RhoStudio'), File.join(mount, 'Motorola RhoStudio'))

    end

    def removeGems(mount)
        cleanDir File.join(mount, '.gems')
    end

    def copyGems(mount)
        names = ['rhodes', 'rhoelements', 'rhoconnect', 'rhoconnect-adapters', 'rhohub']
        files = names.map { |n| findGemAndReport(n) }
        files.each { |f| cp(f, File.join(mount, '.gems')) }
    end

    namespace "user" do
      task :gems do
        installGems
        makeSamplesWin
        removeEclipseSettings()
      end

      task :nsis => "gems" do
        puts 'start build nsis script: ' + $installScript
        runNsisScript($installScript)
      end

      task :rename => "nsis" do
        renameInstaller('RhoStudioInstaller', 'RhoStudioInstaller', '.beta')
      end

    end

    namespace "motorola" do
      task :clean do
        #removePluginWin
        removeRuby
        removeSamplesWin
        removeReadme
        removeRhoElements2
        #removeEclipseSettings
        removeNsisScript
        removeInstaller
      end

      task :gems => 'clean' do
        #exportPluginWin

        copyRuby
        installGems
        removeRubyCache

        makeSamplesWin

        copyReadme
        moveRhoElements2

        #removeEclipseSettings
      end

      task :nsis => "gems" do
        puts 'release - start build nsis script: ' +  $installMotoScript
        runNsisScript($installMotoScript)
      end

      task :rename => "nsis" do
        puts 'release - start rename task'

        renameInstaller('RMS_', 'RMS_', '')
      end
    end

    namespace "rhostudio" do
      task :plugin do
        exportPluginWin
      end

      task :feature do
        exportFeature
      end
    end

    namespace 'mac' do
      namespace 'dmg' do

        task :clean do
          disk, mount = attachSuiteDmg
          removeGems mount
          removePluginMac mount
          removeSamplesMac mount
          removeMiscFilesMac mount
        end

        task :make => 'clean' do
          disk, mount = attachSuiteDmg
          copyGems mount
          exportPluginMac mount
          makeSamplesMac mount
          makeMiscFilesMac mount
        end

        task :open do
          disk, mount = attachSuiteDmg
          run "open '#{mount}'"
        end
      end

      task :dmg do
        removeRwDmg
        makeRwDmg
      end

      task :make => :clean do
        makeRwDmg

        Rake::Task['installer:mac:dmg:make'].invoke

        puts
        puts 'Now installer image will be opened in Finder. Please hide side bar if any, "zoom" window to fit content and close it.'
        print 'Press Enter to open image...'
        STDOUT.flush()
        STDIN.gets

        Rake::Task['installer:mac:dmg:open'].invoke

        puts
        print 'Press Enter to continue rake...'
        STDOUT.flush()
        STDIN.gets

        makeRoDmg
      end

      task :clean do
        removeRwDmg
        removeRoDmg
      end
    end

    ########################################################

    task :gems do
      installGems
    end

    task :motorola => "motorola:rename" do
    end

    task :tag do
      cd $installer_dir
      git_apply_label($version)
      cd $studio_dir
      git_apply_label($version) 
    end

    task :test do
    end

end
